<?xml version="1.0" ?>
<rss version="2.0">
  <channel>
    <title>chrisman.github.io</title>
    <link>https://chrisman.github.io/</link>
    <description>
      chrisman's tech blog
    </description>
    <item>
      <title>zsh suffix alias</title>
      <link>https://chrisman.github.io/posts/zsh-suffix-alias.html</link>
      <description>
        <h1 class="title">zsh suffix alias</h1> <p class="author">chrisman</p> <p class="date">2020-06-16</p> <p>zsh suffix aliases are a quirky little hack that allow you to define an alias for a file extension.</p> <p>For example, if you would to just type the name of a <code>.js</code> file and open it in vim instead of laboriously typing out <code>vim filename.js</code>, you can pop this into your <code>zshrc</code> file:</p> <pre><code>alias -s js=vim</code></pre> <p>Cute. I have it in my config. I rarely use it.</p> <p>Another use case that I think is legit is bulking up media types as ~smhmd suggested on HN:</p> <pre><code>alias -s {ape,avi,flv,m4a,mkv,mov,mp3,mp4,mpeg,mpg,ogg,ogm,wav,webm}=mpv</code></pre> <p>But it's this comment by ~rgrau that really rolls my socks:</p> <blockquote> <p>suffix aliases do not even have to refer to a real existing file. They are an alias. That's what I use to clone git repos I copypaste:</p> <p>alias -s git="git clone"</p> </blockquote> <p>This one is cool, and I actually do use it a lot. Just copy and pasting a git repo URL into the terminal clones it.</p> <p>HN thread: https://news.ycombinator.com/item?id=23309310</p>
      </description>
    </item>
    <item>
      <title>No Masters</title>
      <link>https://chrisman.github.io/posts/no-masters.html</link>
      <description>
        <h1 class="title">Racism and Oppressive Language in Software Development</h1> <p class="subtitle">small ways to be anti-racist</p> <p class="author">chrisman</p> <p class="date">2020-06-12</p> <p>There is a lot of metaphor embedded in software development. Julia Evans recently did a really interesting analysis of metaphor in man pages in <a href="https://jvns.ca/blog/2020/05/08/metaphors-in-man-pages/"><em>Metaphors in Man Pages</em></a>.</p> <p>Another pervasive metaphor that exists in software development is that of white supremacy.</p> <p>You can see examples of the "Black is Bad" effect when we talk about blacklisting and whitelisting. Or about black hat and white hat hackers.</p> <p>One surprisingly common convention in hardware and software is to describe things as having a "master / slave" relationship.</p> <p>In a memo titled <a href="https://tools.ietf.org/id/draft-knodel-terminology-00.html"><em>Terminology, Power and Oppressive Language</em></a> The <abbr title="Internet Engineering Task Force">IETF</abbr> makes several recommendations for alternatives such as replacing blacklist and whitelist with blocklist and allowlist. This is anti-racist, and also has the additional benefit of being more clear, precise, and descriptive by saying what it actually is instead of relying on racism to convey meaning.</p> <p>They also recommend several alternatives to master/slave such as primary/secondary.</p> <p><a href="https://github.com/git/git/blob/master/builtin/init-db.c#L268">Master/slave terminology is hardcoded into git</a>. Git by default initializes a project with a "master" branch.</p> <p>Eliminating racist language from the platform is possible. <a href="https://www.vice.com/en_us/article/8x7akv/masterslave-terminology-was-removed-from-python-programming-language">Python did it</a>. Until that happens though, what you and I can do right now is to configure git locally to initialize with a primary branch called something--anything, really--besides master.</p> <p>You can do this with <a href="https://git-scm.com/docs/git-init#_template_directory">git template directories</a>, which contain everything you want copied into a <code>.git</code> directory upon initialization. Including the <code>HEAD</code> file, which contains a reference to the name of the primary branch.</p> <p>So I did it.</p> <p>I created a template directory, and <a href="https://github.com/chrisman/dotfiles/commit/ab92f5b8928869ca24d8a459ba612f3839960403">updated my gitconfig</a> to use it.</p> <p>Now every time I run <code>git init</code> I start with a "main" branch.</p> <p>Because we should be dismantling racism when ever and where ever we encounter it.</p> <p>You can use <a href="https://github.com/chrisman/kill-your-masters" class="uri">https://github.com/chrisman/kill-your-masters</a> to get started yourself.</p> <p>Kill your masters.</p>
      </description>
    </item>
    <item>
      <title>Mentoring</title>
      <link>https://chrisman.github.io/posts/mentoring.html</link>
      <description> <header id="title-block-header"> <h1 class="title">mentoring</h1> <p class="subtitle">what it is and what it isn't, and who does it</p> <p class="author">chrisman</p> <p class="date">2020-05-29</p> </header> <nav id="TOC" role="doc-toc"> <ul> <li><a href="#what-is-mentoring">What is mentoring</a></li> <li><a href="#suitable-topics-for-mentoring">Suitable topics for mentoring</a></li> <li><a href="#how-to-find-a-mentor">How to find a mentor</a></li> </ul> </nav> <h2 id="what-is-mentoring">What is mentoring</h2> <p>Mentoring is dead simple. Here's what it is:</p> <ol type="1"> <li><p>Find somebody with experience and / or skills that you don't have in some area that you would like to get better at.</p></li> <li><p>Explain to them your current situation / difficulties and ask for advice.</p></li> <li><p>Go act on the advice and see how it goes.</p></li> <li><p>Report back and discuss how it went.</p></li> </ol> <p>That's it.</p> <p>Repeat steps 2 - 4 as many times as you want to. Congrats, you are now being mentored.</p> <p>This framework works well because it is suitable for micro, serial mentorships wherein you meet maybe three times with your mentor and then end the contract, and move on to seeking a mentor in some other area. It is also suitable for long term relationships that span months or years.</p> <p>Because of this, it is sometimes important to note an omitted step: agree on the terms of your relationship. This doesn't have to be weird or overly formal. In the Dungeons and Dragons community, we call this having a "Session Zero," a session before the play sessions begin in which the players all talk about ground rules and expectations.</p> <p>In the past when I've established these temporary kind of mentorships, I've usually started with something like the following:</p> <ol type="1"> <li><p>Introduction: Hey, I'm trying to learn more about x, and I know you know a lot about it. Do you mind if we meet for a coffee and I can show you where I'm at, and maybe get some feedback, input, advice from you?</p></li> <li><p>The meeting: do the thing.</p></li> <li><p>Invitation: This has been super helpful! Thank you! I want to go try the things you suggested, and then I'd really like to follow up with you and let you know how it went. Do you mind if we have a few regular check-ins on this? Maybe meet like this every two weeks a couple of times? Would you like to be my x mentor?</p></li> </ol> <h2 id="suitable-topics-for-mentoring">Suitable topics for mentoring</h2> <p>In this way, I've had plenty of these "flash mentorships," usually on stuff like interviewing, managing large projects.</p> <p>I once tried to have somebody mentor me on "Ruby," but that didn't go really well because the topic was both too broad and somehow also too narrow. The advice usually amounted to "try writing more Ruby."</p> <p>I have found that for learning languages or frameworks with somebody, it's usually better to just start a little side project together in said language or framework. This can be fun if one person is strong and one person is weak in the technology because it can still allow for some mentoring type interactions while working together. And it can also be fun if both people are weak in the technology. This isn't mentoring but it is learning together and is a valuable learning experience in which you can share what you learn with each other as you go and kind of mentor each other along the way.</p> <h2 id="how-to-find-a-mentor">How to find a mentor</h2> <p>Most of the mentoring relationships I've had in the past have been with peers and colleagues at work. Because of the amount of time I spend working with them, I get to see actual evidence of their expertise, and also I develop a familiarity with them that makes it easier for me to approach them with questions.</p> <p>With few exceptions, most attempts at mentoring with a direct supervisor or manager have been unsatisying or unsucessful for me. It might be that, because of the nature of the relationship, it can be difficult for a manager to simply advise without directing. (I must clarify that I've had plenty of managers who are wonderful <em>coaches</em>, but I consider that a wholly separate category of relationship.)</p> <p>That said, you need not look only within your place of work for mentors. In fact, it is a trap to think that you are limited to the official learning and growth opportunities provided through your company's org chart.</p> <p>You can also leverage social communities on slack, like the fantastic denverdevs.com. Or on irc, such as at tildeverse.org.</p> <p>Tangientially related, I've also long been a fan of the curiosity conversation as defined by Brian Grazer in <em>A Curious Mind</em>, wherein under the guise of sheer curiosity you arrange a meeting with somebody (usually a stranger) to learn more about their story and what they do.</p> <p>When I was first getting started in my tech career, I scheduled monthly curiosity conversations with CTOs and VPs of Engineering and Engineering Managers at companies that I was interested in or curious about. I learned that people are very willing to talk about themselves if you ask them questions about themselves. And it is a testament to the community that such seemingly busy and important folks would take the time to have a cup of coffee and a conversation with somebody barely out of their code school bootcamp.</p> <p>None of those conversations turned into mentorships for me. I got plenty of advice, but rarely reported back on the outcomes of that advice. But I didn't go into these conversations looking for mentorship. I really did just want to satisfy some curiosity around how this industry works, and how people who are successful in it conduct themselves. But I mention it here, and share my success in arranging these meetings, to say that you really can just cold call people on LinkedIn if you are looking for advice or stoies.</p> </description>
    </item>
    <item>
      <title>Github CI</title>
      <link>https://chrisman.github.io/posts/2020-05-25-github.html</link>
      <description>
        <h1 class="title">Github CI</h1> <p class="subtitle">a dive into private keys, private repos, and continuous integration</p> <p class="author">chrisbrown</p> <p class="date">2020-05-25</p> <p>I recently spent almost an entire day battling a broken Github Actions CI pipeline because of a new, private dependency. Here is that story.</p> <h2 id="the-setup-basic-continuous-integration">The Setup: Basic Continuous Integration</h2> <p>Scenario: you have a dandy little repo for a website that you’re cooking up, and you have some Github Actions doing some CI on push and on pull requests. The actions are:</p> <ol type="1"> <li><p>running your linter (because you are fastidious enough to recognize the value in picking lint but you are also refined enough to not stoop to picking lint yourself), and</p></li> <li><p>running your project on a variety of versions of node, across a variety of operating systems. This is called a <em>build matrix</em> and it ensures that your code is resilient enough to run under lots of different conditions</p></li> </ol> <h2 id="the-wrinkle-private-dependencies">The Wrinkle: Private Dependencies</h2> <p>Now your code has a new dependency. A library from a 3rd party vendor, hosted in a private repo on GitHub.</p> <p>You have access to the private repo yourself, and can download and use the library just fine. The wrinkle is that your CI tools are not real “people” and they don’t have “GitHub accounts” so you can’t add them to the private “repository” so they can’t download and install the dependency, and so they can’t complete the build, and so now your entire pipeline is broken.</p> <h2 id="controlled-access-to-the-private-repo">Controlled Access To The Private Repo</h2> <p>The first thing you want to do is figure out a way to grant controlled access to this private repo.</p> <p>Luckily for us, the private repo belonged to our organization (<em>the 3rd party vendor was ME, Barry!</em>) so I had access to the repo’s settings and could figure this part out myself instead of having to coordinate with an actual 3rd party.</p> <p>What ended up being the solution here was <a href="https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys">deploy keys</a>.</p> <p>This involves creating a new set of public/private SSH keys. This was intimidating to me because I don’t know a whole ton about SSH keys. One misconception I had was that they keys would somehow intrinsically have some kind of identifying information about me attached to them, and I didn’t want my personal keys associated with this repo or, more importantly, my own privacy some how put at risk.</p> <p>But that was, as I said, a misconception. There’s nothing inherently identifying about the keys. They don’t really identify an <em>individual</em> at all. They simply perform a sort of lock and unlock function with each other.</p> <p>Anyway, here’s what I did:</p> <ol type="1"> <li><p>Make a <a href="https://youtu.be/lKcpodt0YCU">brand new key</a>:</p> <ol type="1"> <li><p><code>ssh-keygen -t rsa -b 4096 -C &lt;some comment&gt;</code> I don’t know if the -C flag is required. I just put in, as an identifying remark, the name of the website repo that will be using the key.</p></li> <li><p>Enter a filename. I again used the name of the web repo.</p></li> <li><p>No passphrase.</p></li> </ol></li> <li><p>Go to <em>Deploy Keys</em> in Settings in the private repo and add a new deploy key. Paste in the <em>public key</em>. Keep <em>Allow Write</em> unchecked: we just want read access.</p></li> </ol> <p>Now anybody with the private key should be able to pull down the private repo.</p> <p>To test it, you can preface any git command with an instruction to use a specific ssh key like this: <code>GIT_SSH_COMMAND="ssh -i path/to/ssh_key" &lt;some command&gt;</code></p> <p>You can, in that fashion, go to a local copy of the private repo and try to <code>git pull</code>. Or you can go to your website repo and try to <code>npm i</code>.</p> <h2 id="github-actions">Github Actions</h2> <p>The next steps required a better understanding of Github Actions than I had at the time.</p> <p>Here’s the flow as I now understand it: the uppercase “Actions” for a repo consists of one or more workflows, made up of one or more “jobs”, which are made up of steps, which can use lowercase “actions”.</p> <p>In slightly more depth:</p> <ol type="1"> <li><p><strong>workflows</strong>: defined by <code>.github/workflows/name.yml</code>. You can edit them pretty effectively (with helpful autocompletion!) right in the browser. (I feel like workflows used to have some kind of a graphical editor on the site, but it’s definitely not there now. I could be mistaken.)</p> <p>I’m not entirely sure why you would have more than one workflow.</p></li> <li><p><strong>jobs</strong>: the parts of the workflow. These can be “lint” and “build”, e.g., as they are in my website repo. You can also run tests as a job. It’s possible to share artifacts between jobs, which is one reason to group or divide jobs: if they don’t need to share any kind of state or information, maybe they should be separate workflows.</p> <p>They run on a vm such as “ubuntu-latest”. I don’t know anything else about this mysterious vm.</p></li> <li><p><strong>steps</strong>: Things to run as part of a job. They can consist of individual lines of bash script via the <code>run:</code> key name, or they can be more complex <em>actions</em> defined by the <code>uses:</code> key name.</p></li> <li><p><strong>actions</strong>: for a more complicated step, you can run an <em>action</em> with the <code>use: &lt;path/to/action&gt;</code> syntax in your yml file. The path can be a “name/repo” kind of path to an action hosted on github (there are a lot of prebuilt “actions/name” actions provided by github), or it can be a relative path to an action.yml file in your own repo. e.g. <code>./.github/actions/myaction/action.yml</code>.</p> <p>action.yml contains instructions for executing a js file or a Dockerfile, defines inputs (env variables or command arguments) and outputs, and some other stuff.</p></li> </ol> <p>I made a sort of actions Hello World / playground at <a href="https://github.com/chrisman/actions/">chrisman/actions</a>. Feel free to take a gander.</p> <h2 id="getting-the-keys-into-the-ci">Getting the Keys into the CI</h2> <p>To fix the build step of our workflow, this ultimately ended up being a simple two step process:</p> <ol type="1"> <li><p>Add a new secret to the website repo, and adding the private key to it.</p></li> <li><p>Adding a <code>use: webfactory/ssh-agent</code> step to the build job. (<a href="https://github.com/webfactory/ssh-agent">webfactory/ssh-agent</a>)</p></li> </ol> <p>Of the two ssh-key actions I tried, both claimed that the secret must be in PEM format. At the same time, GitHub insisted that the Deploy Key must be in openssl format. Although you can easily convert between the formats, they cannot used with each other for some reason. This was a headache.</p> <p>Of the two, only webfactory/ssh-agent seemed to <em>say</em> it requires PEM, but only in a wink-wink kind of way, while actually also allowing openssl while pretending to look the other way.</p> <p>For the sake of completeness, the other action I tried was <a href="https://github.com/shimataro/ssh-key-action">shimataro/ssh-key-action</a>. Great action. Just didn’t work for what I needed it for.</p> <h2 id="getting-the-keys-into-the-linter">Getting the keys into the linter</h2> <p>I never succeeded at this.</p> <p>Well. I secceeded at this. But it didn’t fix what was ultimately broken about this step.</p> <p>We were using <a href="https://github.com/MarvinJWendt/run-node-formatter">MarvinJWendt/run-node-formatter</a> for linting, which was awesome and annoying.</p> <p>It’s deal was this: it would checkout the branch on push, authorize itself to the repo with a github oauth env token, and run the linter. If there were any corrections, it would push the changes itself to the branch.</p> <p>This was great because it meant you never had to slow down even an infintesimal amount of time to run the linter yourself locally: the CI would lint and commit for you!</p> <p>But it was annoying because if you ever didn’t lint, the lint + commit would happen remotely, so your local would immediately be out of sync, and you’d have to pull and merge before continuing to make changes.</p> <p>I found this to be worse because:</p> <ol type="1"> <li>It take longer to have changes rejected and to pull new changes than it does to just run the linter, and</li> <li>It creates an ugly merge commit</li> </ol> <p>Anyway, I tried a couple things:</p> <ol type="1"> <li><p>Adding a <code>use: webfactory/ssh-agent</code> like with the build steps. This did not work.</p></li> <li><p>Copying the action to <code>.github/actions/formatter/action.yml</code>. Updating the Dockerfile to build with openssl. Seting “secretkey” and “knownhosts” secrets on the repo. Modifying action.yml to set them to env variables. Changing entrypoint.sh to create <code>.ssh/id_rsa</code> and <code>.ssh/known_hosts</code> and start the ssh-agent and add the key to the agent.</p></li> </ol> <p>This did everything I wanted it to! I could <code>ssh-keygen -lf id_rsa</code> (in entrypoint.sh) to check the fingerprint and compare it to the one I have locally.</p> <p>But it still failed at installing the private repo with an npm “No user exists for UID” error.</p> <p>What I could learn from my research, thanks to brave Jenkins users who forged the path of CI ahead of us, is that I could get around this by setting a UID / GID on the Docker container, but this Alpine image is–I think–already running on the Ubuntu vm defined by the workflow.yml, and I don’t know–nor do I care to know–how to pass that kind of information through that many (count ’em: two!) layers of abstraction.</p> <h2 id="linting-locally">Linting Locally</h2> <p>So I deleted the linter action and added a pre-commit hook to lint locally.</p> <p>It’s fine. It’s actually better than fine: it’s great!</p> <p>The vue CLI provides githooks out of the box via <a href="https://github.com/yyx990803/yorkie">yorkie</a> (a fork of the perennial <a href="https://github.com/typicode/husky">husky</a>).</p> <p>A quick <code>npm i -D lint-staged</code>, and a short addition to my package.json:</p> <pre><code>&quot;gitHooks&quot;: { &quot;pre-commit&quot;: &quot;lint-staged&quot; }, &quot;lint-staged&quot;: { &quot;*.{js,vue}&quot;: &quot;vue-cli-service lint&quot; },</code></pre> <p>… and I was good to go! Linting the entire project takes an agonizing number of seconds. Like, maybe up to 2! Linting merely the staged files takes next to no time. Bonus: no more upstream commits getting your local branch out of sync.</p> <h2 id="resources">Resources</h2> <h3 id="glossary">Glossary</h3> <dl> <dt> Lint </dt> <dd> A bit of fluff you pick off a piece of clothing. The stuff you remove from the lint trap of a clothes dryer. An ort, a scrap, an iota. A trifling not work concerning yourself with. Hardly worth your effort to worry about. Best to offload responsibility for such a menial triviality to some kind of automated code scanner.  </dd> </dl>
      </description>
    </item>
    <item>
      <title>On Complexity</title>
      <link>https://chrisman.github.io/posts/2020-01-28-complexity.html</link>
      <description>
        <header id="title-block-header"> <h1 class="title">Reducing Complexity</h1> <p class="subtitle">the most worthwhile pursuit</p> <p class="author">chrisbrown</p> <p class="date">2020-01-28</p> </header> <nav id="TOC" role="doc-toc"> <ul> <li><a href="#complexity-in-software">Complexity in Software</a></li> <li><a href="#complexity-is-universal">Complexity is Universal</a></li> <li><a href="#complexity-of-mind-and-body">Complexity of Mind and Body</a></li> <li><a href="#complexity-of-abstract-thought">Complexity of Abstract Thought</a></li> <li><a href="#complexity-of-humans">Complexity of Humans</a></li> <li><a href="#conclusion">Conclusion</a></li> <li><a href="#footnotes">Footnotes</a></li> <li><a href="#further-reading">Further Reading</a></li> <li><a href="#glossary">Glossary</a></li> </ul> </nav> <p>I’m working on a theory that most worthwhile endeavors are attempts to reduce complexity in our lives.</p> <h2 id="complexity-in-software">Complexity in Software</h2> <blockquote> <p>Complexity is anything related to the structure of a software system that makes it hard to understand and modify the system.</p> </blockquote> <p><em><a href="https://www.goodreads.com/book/show/39996759-a-philosophy-of-software-design">A Philosophy of Software Design</a></em> is a sort of anti-complexity manifesto. In it, the author builds his entire world view, as it pertains to designing software systems, on the following tenants:</p> <ol type="1"> <li><p>The fundamental exercise of software design is breaking large problems down into smaller problems.</p></li> <li><p>As systems grow, they gain complexity because they gain dependencies and obscurity.</p></li> <li><p>Complexity can be reduced through careful design. Careful design includes hiding complexity behind simple interfaces, thoughtful documentation, correct abstractions, etc.</p></li> </ol> <p>One of the more remarkable parts of the book to me was when, in one of the later chapters, the author briefly discusses a short list of “recent trends” in software development such as agile, TDD, and design patterns<sup>1</sup>. When discussing them, he analyzed each topic by applying his world view of “Simplicity is the most important thing,” and was thus able to evaluate their worth based on how much complexity they added or reduced in the system. As such, he was kind of okay with design patterns, sort of okay with agile (units of development, he argues, should be <em>abstractions</em> not <em>features</em>) and not that big a fan of TDD.</p> <p>I found this part interesting because of how this notion of simplicity–or at least that of anti-complexity–allowed the author to, in black and white, critique and analyze entire practices and processes of development and design and decide whether they were good or bad. For definitions, that is, of good and bad as they map to simple and complex.</p> <h2 id="complexity-is-universal">Complexity is Universal</h2> <p>In <a href="http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail">Reality has a surprising amount of detail</a> (<a href="https://news.ycombinator.com/item?id=16184255">HN</a>), John Salvatier demonstrates how neither breaking big problems down into smaller problems nor reducing complexity are by any means unique to software design when he describes the inherint complexity in things as seemingly simple as building basement stairs, or even boiling a pot of water.</p> <p>Software is a new field, as such things go. People have been decomposing problems, and creating abstractions and models for millenia.</p> <p>There is no reason to think that we who write software are special or unique for valuing or creating simplicity, nor to think that we are even really any good at it. At least, not any better than the carpenter or the stone mason.</p> <h2 id="complexity-of-mind-and-body">Complexity of Mind and Body</h2> <p>The things I am valued for–the things that people pay me money to do–are these:</p> <ol type="1"> <li>Design and write software</li> <li>Teach yoga</li> </ol> <p>Yoga is a lot of different things. One of the things it is, is a novel <em>more simple</em> way of being in your body and in your mind. Through yoga asana (the physical form of yoga that most people think of when they think of “yoga”) and through meditation, the practitioner gets to experience and enjoy the simplicity of a more shallow interface, behind which the complexity of one’s body and one’s mind is temporarily hidden.</p> <p>And so yoga feels good.</p> <p>It gives you a simple, defined way to interface with and interact with your body.</p> <p>It provides you, through meditation, a simple (not easy!) means of engaging with your mind. A set of tools with which you can create a sort of abstraction for the complexity of your mind.</p> <p>Yoga is a great sort of API for your mind and body.</p> <h2 id="complexity-of-abstract-thought">Complexity of Abstract Thought</h2> <p>Yoga teachers are fond of framing just about everything in the context of yoga, which is something you can easily do when you believe that yoga effects most ascpects of existing: your physical self, breathing, focus and thinking, even ethics and morality if you’re into the yamas and the niyamas.</p> <p>And so if pressed on the matter, most yoga teachers will readily agree, “Yeah, pretty much everything is yoga.”</p> <p>And so, a colleague of mine who is also both a software engineer and a yoga teacher were talking one afternoon about how “everything is yoga,” and I decided to introduce to him what was then a blossoming Anti-Complexity Unified Theory, and I said to him, “Yes, and I think everything also might be software design.”</p> <p>And I proceeded to tell him about simplicity and how I’m coming to think that maybe most things we do are attempts to reduce or at least hide complexity through the design of simple interfaces and APIs.</p> <p>He argued, “Well, some things, perhaps, but not all things. Not things like creativity.”</p> <p>But I think that “creativity” may be one of the ultimate attempts at reducing complexity: the distillation and expression of an abstract thought or feeling in a novel way is most certainly the act of creating a sort of more simple interface for whatever feeling or emotion the artist is trying to capture and convey.</p> <p>It’s why we create metaphor and fiction: abstractions that represent a complex idea or concept that we don’t have a single word or simple term for.</p> <p>“Well, perhaps. But not things like friendship.”</p> <h2 id="complexity-of-humans">Complexity of Humans</h2> <p>I’m not sure about that one either. Humans are improbably complex creatures. Wholly irrational and unpredictable. Totally unknowable. Nobody would design such a system; it simply wouldn’t be allowed. Impossible to QA, for one thing.</p> <p>When I think of strong friendships I’ve been fortunate to have, I think of how reliable and predictable those relationships are. I think of how I know how to talk to my friends about what topics, and how easy those conversations and relationships are.</p> <p>We have essentially, my friend and I, created simple interfaces behind which we can hide the complexity of who we are, of being human. That complexity is still there, of course. But is for the most part abstracted away. With my friends, I’m reasonably confident that I can interact with this most complex system, I can exchange information with it in the form of conversations and experiences and feelings, and it won’t generate any “errors.” Or if so, hopefully not any fatal ones.</p> <p>I wouldn’t walk up to a stranger and start talking in a vulnerable way about my feelings and thoughts, because their API is undocumented and I haven’t explored it.</p> <p>So I don’t know. Maybe friendship is a sort of API or interface design.</p> <h2 id="conclusion">Conclusion</h2> <p>There’s no big conclusion here. This is just an idea I’m kicking around: simplicity as a world view. The value of creating predictable, reliable systems by designing interfaces that hide complexity. In all areas of life.</p> <p>It’s why we create abstractions. Our brains are wired for it. It’s why a lot of art works. It’s why we can look at a colon and a closing parenthesis and think it looks like a smiley face :)</p> <h2 id="footnotes">Footnotes</h2> <p><sup>1</sup> Amusing to see these called “trends”! Okay, maybe TDD is a trend. And maybe agile, too. But <em>design patterns?</em> That’s almost like saying Object Oriented Programming is a trend! Which I suppose one could actually argue..</p> <p>I guess I’m still pretty new here, because these are just “the way things are done.” If the rise and fall of trends over the history of the profession of software development form a curve, then the span of my entire career must be short enough to basically be the derivative of that curve at a single point.</p> <p>What a dose of perspective.</p> <h2 id="further-reading">Further Reading</h2> <ul> <li>Simple Made Easy, Rich Hickey: https://www.infoq.com/presentations/Simple-Made-Easy/</li> </ul> <h2 id="glossary">Glossary</h2> <dl> <dt> Yoga </dt> <dd> A useful interface for accessing one’s mind and body </dd> </dl> 
      </description>
    </item>
    <item>
      <title>Markdown and makefiles</title>
      <link>https://chrisman.github.io/posts/2020-01-01-make.html</link>
      <description>
        <p>I wrote a makefile!</p> <h2 id="there-has-always-been-a-make">There has always been a make</h2> <p>I’ve always known that Make is a thing.</p> <p>Rather, I know that Make has always been a thing.</p> <p>It was written in 1976 which, at the time of this writing, makes it a 43 year old tool, an older tool than me. At the time of this writing.</p> <p>Make is a relic from the olden times, from the days of yore. A standby of C/C++ hackers. Something that greybeard wizards mutter and chatter and argue about as they craft and maintain their own special makefiles by hand.</p> <p>But my interaction with <code>make</code> has always been limited to merely reciting that age old incantation: <code>./configure &amp;&amp; make &amp;&amp; make install</code> without ever delving too much into what it is and what it does. I knew that it’s something you use when building code from source, but that was the extent of my knowledge.</p> <p>I’ve always appreciated the elegance of the basic formula:</p> <pre class="make"><code>target: prerequisite recipe</code></pre> <p>Or, to use a slightly different vocabulary:</p> <pre class="make"><code>task: dependency code</code></pre> <p>Whichever you prefer, really:</p> <pre class="make"><code>target: source command</code></pre> <p>Very plain, very organized. Simple. I’ve heard people say that a well written Makefile is like documentation for a project, and I can understand a little bit why they would say that. It’s like reading a cookbook: a list of dishes, ingredients, and how to build those dishes from those ingredients:</p> <pre class="make"><code>dish: ingredient recipe</code></pre> <h2 id="make-is-a-build-tool">Make is a build tool</h2> <p>Make is a build tool, and a task runner.</p> <p>You’ve encountered such things in your travels:</p> <ul> <li><p><code>ant</code>, <code>maven</code>, and/or <code>gradle</code> if you’re a Java kind of person.</p></li> <li><p>If you’re a java <em>script</em> kind of person, then you’ve written npm scripts in your <code>package.json</code> to run your tests or start your server; and you’ve used grunt or gulp, or webpack.</p></li> <li><p><code>rake</code>, if you’re a ruby/rails kind of person. (Which was my first attempt at using a Make-like kind of build tool.)</p></li> </ul> <p>It builds stuff and automates tasks.</p> <p>Advantages that <code>make</code> has over other solutions like npm scripts is that:</p> <ol type="1"> <li><p>It only builds a target if it needs to. (If the sources have been updated.)</p></li> <li><p>No extra dependencies: it’s pre-installed on all *nix platforms, including macos.</p></li> <li><p>It can wrap existing build tools! You can have <code>make</code> install your node_modules if they’re missing (as long as there is a package.json), run a bash script, start your server, etc.</p></li> </ol> <h2 id="i-wrote-a-makefile">I wrote a makefile</h2> <p>So I’ve always wanted an excuse to learn <code>make</code>.</p> <p>And when starting this blog, I needed a way to create HTML files from markdown source files. I certainly didn’t want to install webpack, or grunt or gulp, or anything like that. Or even npm. Minimalism is the name of our game. I don’t want any other dependencies.</p> <p>And so, excuse in hand, I got to cracking away at it.</p> <p>It took me a minute to learn <del>all</del> enough of Make’s magic variables, macros, and built-in functions. What <em>really</em> took me a minute to wrap my head around was how I had to adhere to, and work around, the basic <code>task &gt; dependency &gt; recipe</code> formula. There’s no flexibility here. Declarative or bust.</p> <p>For example: I was trying to write a recipe that targets a bunch of HTML files. The problem is that I didn’t <em>have</em> those HTML files. Nor did I necessarily know what they <em>are</em>. I didn’t have a list of my targets, and that was a problem.</p> <p>What I did have is a list of prerequisites: a bunch of Markdown files.</p> <p>That is, given Make’s strict syntax requirements, you can’t just start with a bunch of ingredients and then simply build something from them. No, you must have the target <em>first</em>. Something to depend on those prerequisites. That’s your entry point.</p> <p>The trick was to do this:</p> <ol type="1"> <li><p>Get a list of all the prerequisites. Easy enough. E.g. <code>find src/posts -name "*.md"</code>. And then,</p></li> <li><p>Use make’s super weird pattern substitution function to map that list of markdown files to a list of the HTML files I <em>wish I had</em> (my list of targets).</p></li> <li><p>And finally, assign that list to a variable, which I can then use as a list of targets.</p></li> </ol> <p>Being declarative is hard work some times.</p> <p>That whole part looks like this:</p> <pre class="make"><code>markdowns := $(shell find src/posts -type f) htmls := $(patsubst src/posts/%.md, posts/%.html, $(markdowns))</code></pre> <p>Here’s another way to do it using the built-in <code>wildcard</code> macro and a different, built-in substitution short hand:</p> <pre class="make"><code>markdowns=$(wildcard src/posts/*.md) htmls=$(markdowns:src/posts/%.md=posts/%.html)</code></pre> <p>Those targets (<code>htmls</code>) are strings that have the format of <code>posts/somefilename.html</code>.</p> <p>So now, targets in hand, we get to do this:</p> <ol type="1"> <li><p>Create some new task that has dependencies equal to the list of htmls. We’ll call it “posts.”</p></li> <li><p>Use pattern matching to create a task for any file matching <code>posts/*.html</code>, which just happens to be the format of all htmls! This target has a dependency of its corresponding markdown file, and its recipe is the pandoc conversion.</p></li> </ol> <p>That part looks like this:</p> <pre class="make"><code>posts: $(htmls) posts/%.html: src/posts/%.md pandoc --options --more-options -o $@ $&lt;</code></pre> <p>Now I can call <code>make posts</code> from the command line, and every markdown file in <code>/src/posts</code> will generate a new HTML file in <code>/posts</code>! Assuming the following, of course:</p> <ol type="1"> <li><p>There’s not already an existing HTML file for that markdown file, AND</p></li> <li><p>the HTML file is newer than the markdown file.</p></li> </ol> <p>That is, it will only create the HTML file if it needs to: if it is missing, or if it is out of date.</p> <p>The makefile in its entirety currently looks like this:</p> <pre class="make"><code>markdowns := $(shell find src/posts -type f) htmls := $(patsubst src/posts/%.md, posts/%.html, $(markdowns)) all: index posts index: index.html index.html: src/index.md pandoc -s -c styles/reset.css -c styles/main.css -c styles/index.css -o $@ $&lt; posts: $(htmls) posts/%.html: src/posts/%.md pandoc -s --toc -c ../styles/reset.css -c ../styles/main.css -o $@ $&lt;</code></pre> <p>(The above snippet may be out of date even as soon as the publication of this post, but the <a href="https://github.com/chrisman/chrisman.github.io/blob/master/Makefile">current Makefile I’m using for this site can always be found on github</a>.)</p> <p>Other parts I didn’t go over are these:</p> <ul> <li>magic variables / “macros” <ul> <li><code>$@</code>: the target</li> <li><code>@&lt;</code>: the first dependency</li> <li><code>@^</code>: (not shown here) ALL dependencies</li> </ul></li> <li>assignment <ul> <li><code>=</code>: lazy assignment</li> <li><code>:=</code>: immediate assignment</li> </ul></li> <li>pattern matching and substitution <ul> <li><code>%</code>: wildcard. as opposed to <code>*</code>, like the rest of the civilized world uses</li> <li><code>patsubst</code>: a function that takes a from pattern, a to pattern, and things to do that pattern substitution on.</li> <li>other macros like <code>shell</code> and <code>wildcard</code></li> </ul></li> </ul> <p>Anyway, that’s my first experience making any kind of a makefile. It’s not fantastic. It’s not easy, but it is simple. And it’s ubiquitous and transferable.</p> <p>And now in the meantime I can <code>make index</code> to create the index page, or <code>make posts</code> to create posts, or just <code>make</code> to make anything and everything that needs making.</p> <h2 id="conclusion">Conclusion</h2> <p>So there. I wrote a makefile.</p> <p>I still have some TODOs and some nitpicks. For example:</p> <ol type="1"> <li><p>I don’t have a great way at the moment, because of my github workflow, to incorporate deployment into my makefile the way I could if I was just <code>scp</code>ing these files to a remote server.</p></li> <li><p>I’d also like to figure out a way to not have to have <code>index</code> and <code>posts</code> be separate targets. That’d mean either learning how to manage subdirectories better in make (complete with relative paths for things that need them, like the stylesheets), or basically removing all directory structure and just dumping everything into one root folder. That’d make building files super simple, but it would also result in a messy, untidy pile of files, which is not something I find delightful.</p></li> </ol> <h2 id="resources">Resources</h2> <ol type="1"> <li>Links</li> <li>Glossary</li> </ol> <h3 id="links">Links</h3> <ul> <li><a href="https://www.olioapps.com/blog/the-lost-art-of-the-makefile/" class="uri">https://www.olioapps.com/blog/the-lost-art-of-the-makefile/</a></li> <li><a href="https://blog.mindlessness.life/2019/11/17/the-language-agnostic-all-purpose-incredible-makefile.html" class="uri">https://blog.mindlessness.life/2019/11/17/the-language-agnostic-all-purpose-incredible-makefile.html</a></li> <li><a href="https://jblevins.org/log/markdown-makefiles" class="uri">https://jblevins.org/log/markdown-makefiles</a></li> </ul> <h3 id="glossary">Glossary</h3> <dl> <dt> Make </dt> <dd> Often refers to GNU Make. An ancient, language agnostic build tool which defines tasks, dependencies, and recipes. Used by C/C++ hackers of old. Not a <em>great</em> tool, but an extremely useful one, and installed everywhere, much like vim. An example of the worse-is-better?  </dd> <dt> Pandoc </dt> <dd> Converts documents from one format/markup to another. Supports a large variety of formats: <a href="https://pandoc.org/">pandoc.org</a> </dd> </dl> 
      </description>
    </item>
    <item>
      <title>Books I Read in 2019</title>
      <link>https://chrisman.github.io/posts/2019-12-23-books.html</link>
      <description>
        <p>chrisbrown</p> <p>2019-12-23</p> <ul> <li><a href="#top-recommendations">Top Recommendations</a></li> <li><a href="#goals">Goals</a></li> <li><a href="#numbers">Numbers</a></li> <li><a href="#books">Books</a> <ul> <li><a href="#fantasy">Fantasy</a></li> <li><a href="#sci-fi">Sci-fi</a></li> <li><a href="#comics-and-graphic-novels">Comics and Graphic Novels</a></li> <li><a href="#dd-sourcebooks">D&amp;D Sourcebooks</a></li> <li><a href="#work-bookclub">Work Bookclub</a></li> <li><a href="#other-work-related-stuff-professional-development">Other Work Related Stuff / Professional Development</a></li> <li><a href="#fiction">Fiction</a></li> <li><a href="#non-fiction">Non-Fiction</a></li> </ul></li> </ul> <p>Here are all the books I read in 2019!</p> <p>I don’t want to write any individual reviews here. Those are all on <a href="https://www.goodreads.com/review/list/409485-christopher?read_at=2019">goodreads</a>. I want to use this space instead to look at some patterns and trends.</p> <p>Also, here’s the nifty little <a href="https://www.goodreads.com/user/year_in_books/2019/409485">Year In Review page</a> that goodreads made for me. Thanks, goodreads!</p> <h2 id="top-recommendations">Top Recommendations</h2> <p>These are the best books of the year.</p> <p>Fantasy:</p> <ul> <li>The Broken Earth Series – Jemisin is my new favorite author. I cannot wait to read more of her.</li> <li>Gideon the Ninth – Wacky, weird, and original</li> </ul> <p>Nonfiction:</p> <ul> <li>Why We Sleep: Unlocking the Power of Sleep and Dreams – literally life changing</li> <li>Dreamland: The True Tale of America’s Opiate Epidemic – comprehensive overview of the US opioid epidemic.</li> </ul> <p>Graphic Novel:</p> <ul> <li>My Degeneration: A Journey Through Parkinson’s – quick read, very revealing</li> </ul> <p>Comics:</p> <ul> <li>Paper Girls – if Stranger Things was about girls with paper routes, and had more time travel</li> </ul> <p>Fiction:</p> <ul> <li>Jonathan Strange &amp; Mr Norrell – hauntingly beautiful</li> <li>Beartown – it was just really pretty. really, really well done.</li> </ul> <h2 id="goals">Goals</h2> <p>For the second year in a row, I set a goal to read 100 books, and then fell short of achieving that goal.</p> <p>I might have hit 100 this year if I hadn’t taken a long hiatus this summer from reading any audiobooks. (I spent that time listening to a lot of podcasts instead of reading.)</p> <p>I’m going to set the same goal again next year, and hope that the third time is the charm! I think I can hit it because I project the following:</p> <ul> <li><p>I can usually read roughly one audiobook a week. If I do <em>half</em> of that, it’s still 26. So I’ll start off with estimating 25 as a lower limit and, let’s say 50 as an upper limit. (25 / 50)</p></li> <li><p>I can also usually read one comic book/graphic novel each weekend. I’ll give that the same 25/50 upper/lower bounds. (total: 50 / 100)</p></li> <li><p>One book every month for bookclub at work is another 12. (total: 62 / 112)</p></li> <li><p>I finish 1 - 3 books each year while vacationing (total: 63 / 115)</p></li> <li><p>And I read at least one other book every month or two, so that’s another 6 - 12. (total: 69 / 127)</p></li> </ul> <p>The dead middle of that range is 98. Round up to 100 and call it a day! 2020 is gonna be my year, I can tell. I can feel it. The year of 100 books!</p> <h2 id="numbers">Numbers</h2> <p>Here’s some numbers.</p> <ul> <li><p>82 Total Books</p> <ul> <li>19 Audiobooks</li> <li>27 Tangible Book: Mostly comics and D&amp;D source books. I was surprised by this high number. I definitely consider myself an “eBooks only” kind of reader.</li> <li>36 eBooks</li> </ul></li> <li><p>23,381 Pages</p></li> <li><p>3 “Did Not Finish”: some books are boring, or terrible, and life’s too short to spend on bad books.</p></li> <li><p>Ratings: (Average rating = 3.6) I think I had started the year with this idea of only giving out 1 star or 5 stars. Create a “thumbs up / thumbs down” system. I didn’t stick to that. But I still think that the 5 star scale continues to be problematic. I just never know what a two or a four is supposed to be.</p> <ul> <li>five star: 24</li> <li>four star: 17</li> <li>three star: 22</li> <li>two star: 7</li> <li>one star: 4</li> </ul></li> </ul> <h2 id="books">Books</h2> <p>Okay, here’s the list broken down into categories:</p> <ol type="1"> <li>Fantasy</li> <li>Sci-fi</li> <li>Comics and Graphic Novels <ol type="1"> <li>Superheroes and Comics</li> <li>Non-Superheroes and Graphic Novels</li> </ol></li> <li>D&amp;D Sourcebooks</li> <li>Work Bookclub</li> <li>Other Work Related Stuff / Professional Development</li> <li>Fiction</li> <li>Non-Fiction</li> </ol> <h3 id="fantasy">Fantasy</h3> <p>Broken Earth is one of the best things I have ever read. Finishing the series is one of my highlights of the year. I want to recommend it to people who don’t even read fantasy.</p> <p>Ratcatchers was another standout, and Gideon was so fresh and weird and unique and great.</p> <ul> <li>Broken Earth Series <ul> <li>The Obelisk Gate (The Broken Earth, #2), Jemisin, N.K. [ 5 of 5 stars ]</li> <li>The Stone Sky (The Broken Earth, #3), Jemisin, N.K. [ 5 of 5 stars ]</li> </ul></li> <li>Ratcatchers Series <ul> <li>Priest (Ratcatchers #1), Colville, Matthew [ 4 of 5 stars ]</li> <li>Thief (Ratcatchers, #2), Colville, Matthew [ 5 of 5 stars ]</li> </ul></li> <li>Gideon the Ninth (The Locked Tomb, #1), Muir, Tamsyn [ 5 of 5 stars ]</li> </ul> <p>The following books belong to a category that I don’t have a good term for. They’re just good old regular swords and sorcery fantasy books. Pulpy and tropey and, for the most part, just plain good fun.</p> <ul> <li>The Way of Shadows (Night Angel, #1), Weeks, Brent [ 3 of 5 stars ]</li> <li>Beyond the Moons (Spelljammer: The Cloakmaster Cycle, #1), Cook, David Zeb [ 1 of 5 stars ]</li> <li>Eberron: The Dreaming Dark Series <ul> <li>The City of Towers (Eberron: The Dreaming Dark, #1), Baker, Keith [ 3 of 5 stars ]</li> <li>The Shattered Land (Eberron: The Dreaming Dark, #2), Baker, Keith [ 3 of 5 stars ]</li> </ul></li> </ul> <h3 id="sci-fi">Sci-fi</h3> <p>Finally got around to reading Dune. Been meaning to since forever.</p> <ul> <li>Dune, Herbert, Frank [ 5 of 5 stars ]</li> <li>Feed, Anderson, M.T. [ 2 of 5 stars ]</li> </ul> <h3 id="comics-and-graphic-novels">Comics and Graphic Novels</h3> <h4 id="superheroes-and-comics">Superheroes and Comics</h4> <p>Spent a lot of time with Swamp Thing this year. I’ve always liked him, ever since I was a kid. The TV show came out (and was cancelled 😭) this year, so I was all smitten.</p> <ul> <li>Action Comics (1938-2011) #775, Kelly, Joe [ 5 of 5 stars ]</li> <li>Swamp Thing <ul> <li>Swamp Thing: The Bronze Age Omnibus, Wein, Len [ 4 of 5 stars ]</li> <li>Swamp Thing by Brian K. Vaughan, Vol. 1, Vaughan, Brian K. [ 3 of 5 stars ]</li> <li>Swamp Thing by Brian K. Vaughan, Vol. 2, Vaughan, Brian K. [ 4 of 5 stars ]</li> </ul></li> <li>Lucifer, Book One (Lucifer, #1), Carey, Mike [ 4 of 5 stars ]</li> <li>Trees, Vol. 2: Two Forests, Ellis, Warren [ 4 of 5 stars ]</li> <li>Tom Strong, Book 1, Moore, Alan [ no rating / did not finish]</li> <li>Hulk <ul> <li>Immortal Hulk, Volume 1: Or is he Both?, Ewing, Al [ 2 of 5 stars ]</li> <li>Immortal Hulk, Volume 2: The Green Door, Ewing, Al [ 3 of 5 stars ]</li> <li>Immortal Hulk, Volume 3: Hulk In Hell, Ewing, Al [ 3 of 5 stars ]</li> </ul></li> <li>Man-Thing, Stine, R.L. [ 1 of 5 stars ]</li> </ul> <h4 id="non-superheroes-and-graphic-novels">Non-Superheroes and Graphic Novels</h4> <p>Paper Girls was the best comic book series I read this year.</p> <p>My Degeneration is the best graphic novel memoir.</p> <ul> <li>My Degeneration: A Journey Through Parkinson’s, Dunlap-Shohl, Peter [ 5 of 5 stars ]</li> <li>Paper Girls: <ul> <li>Paper Girls, Vol. 1, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>Paper Girls, Vol. 2, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>Paper Girls, Vol. 3, Vaughan, Brian K. [ 4 of 5 stars ]</li> <li>Paper Girls, Vol. 4, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>Paper Girls, Vol. 5, Vaughan, Brian K. [ 5 of 5 stars ]</li> </ul></li> <li>A Study in Emerald, Gaiman, Neil [ 5 of 5 stars ]</li> <li>Saga: Book Three, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>FUN: Spies, Puzzle Solvers, and a Century of Crosswords, Bacilieri, Paolo [ 4 of 5 stars ]</li> <li>Resident Alien Volume 3: The Sam Hain Mystery, Hogan, Peter [ 4 of 5 stars ]</li> <li>Six Days in Cincinnati: A Graphic Account of the Riots That Shook the Nation a Decade Before Black Lives Matter, Dan P. Moore [ 3 of 5 stars ]</li> <li>Snowden, Ted Rall [ 3 of 5 stars ]</li> <li>Black Magick, Vol. 1: Awakening, Part One, Rucka, Greg [ 3 of 5 stars ]</li> <li>Stumptown, Vol. 1: The Case of the Girl Who Took Her Shampoo, Rucka, Greg [ 3 of 5 stars ]</li> <li>LaGuardia, Okorafor, Nnedi [ 4 of 5 stars ]</li> <li>Bushido: The Soul of the samurai [a graphic novel], Nitobe Inazō [ 2 of 5 stars ]</li> </ul> <h3 id="dd-sourcebooks">D&amp;D Sourcebooks</h3> <ul> <li>Xanathar’s Guide To Everything, Wizards RPG Team [ 5 of 5 stars ]</li> <li>Ghosts of Saltmarsh (Dungeons &amp; Dragons, 5th Edition), Wizards RPG Team [ 5 of 5 stars ]</li> <li>Mordenkainen’s Tome of Foes (Dungeons &amp; Dragons, 5th Edition), Wizards RPG Team [ 4 of 5 stars ]</li> <li>Sword Coast Adventurer’s Guide, Kenson, Steve [ 3 of 5 stars ]</li> <li>Premium 2nd Edition Advanced Dungeons &amp; Dragons Player’s Handbook, Wizards RPG Team [ 2 of 5 stars ]</li> </ul> <h3 id="work-bookclub">Work Bookclub</h3> <p>I use bits of The Coaching Habit at work every day.</p> <ul> <li>The Coaching Habit: Say Less, Ask More &amp; Change the Way You Lead Forever, Bungay Stanier, Michael [ 5 of 5 stars ]</li> <li>Measure What Matters, Doerr, John E. [ 4 of 5 stars ]</li> <li>Drive: The Surprising Truth About What Motivates Us, Pink, Daniel H. [ 3 of 5 stars ]</li> <li>Nudge: Improving Decisions About Health, Wealth, and Happiness, Thaler, Richard H. [ no rating / did not finish ]<br /> </li> <li>The Effortless Experience: Conquering the New Battleground for Customer Loyalty, Dixon, Matthew [ 3 of 5 stars ]</li> </ul> <h3 id="other-work-related-stuff-professional-development">Other Work Related Stuff / Professional Development</h3> <ul> <li>Sams Teach Yourself SQL™ in 10 Minutes, Forta, Ben [ 5 of 5 stars ]</li> <li>Land of LISP: Learn to Program in LISP, One Game at a Time!, Barski, Conrad [ 4 of 5 stars ]</li> <li>Influence: The Psychology of Persuasion, Cialdini, Robert B. [ 3 of 5 stars ]</li> </ul> <h3 id="fiction">Fiction</h3> <ul> <li>Jonathan Strange &amp; Mr Norrell, Clarke, Susanna [ 5 of 5 stars ]</li> <li>Beartown, Backman, Fredrik [ 5 of 5 stars ]</li> <li>The Phantom Tollbooth, Juster, Norton [ 5 of 5 stars ]</li> <li>The 7 1/2 Deaths of Evelyn Hardcastle, Stuart Turton [ 5 of 5 stars ]</li> <li>Everything I Never Told You, Ng, Celeste, Santos, Marisa de los [ 4 of 5 stars ]</li> <li>Gods of Jade and Shadow, Moreno-Garcia, Silvia [ 4 of 5 stars ]</li> <li>The Underground Railroad, Whitehead, Colson [ 4 of 5 stars ]</li> <li>The Monk of Mokha, Eggers, Dave [ 4 of 5 stars ]</li> <li>The Alice Network, Quinn, Kate [ 4 of 5 stars ]</li> <li>Golden State, Winters, Ben H. [ 3 of 5 stars ]</li> <li>Dorothy Must Die (Dorothy Must Die, #1), Paige, Danielle [ 3 of 5 stars ]</li> <li>Greatest Enemy (David Rivers #1), Kasper, Jason [ 2 of 5 stars ]</li> </ul> <h3 id="non-fiction">Non-Fiction</h3> <p>Why We Sleep is probably my Best Book Of 2019. It’s INSANE.</p> <ul> <li>Why We Sleep: Unlocking the Power of Sleep and Dreams, Walker, Matthew [ 5 of 5 stars ]</li> <li>Dreamland: The True Tale of America’s Opiate Epidemic, Quinones, Sam [ 5 of 5 stars ]</li> <li>District 13: The Drama on the Armed Conflict in Medellin, Colombia, Rendon, Yoni Alexander Rendon [ 5 of 5 stars ]</li> <li>Sissy: A Coming-of-Gender Story, Tobia, Jacob [ 4 of 5 stars ]</li> <li>Goodbye, Things: The New Japanese Minimalism, Sasaki, Fumio [ 4 of 5 stars ]</li> <li>Always Look on the Bright Side of Life: A Sortabiography, Idle, Eric [ 4 of 5 stars ]</li> <li>Digital Minimalism: Choosing a Focused Life in a Noisy World, Newport, Cal [ 3 of 5 stars ]</li> <li>Let’s Make Ramen!: A Comic Book Cookbook, Amano, Hugh [ 3 of 5 stars ]</li> <li>Dungeon Hacks: How NetHack, Angband, and Other Roguelikes Changed the Course of Video Games, Craddock, David L. [ 3 of 5 stars ]</li> <li>Meet the Frugalwoods: Achieving Financial Independence Through Simple Living, Thames, Elizabeth Willard [ 3 of 5 stars ]</li> <li>The Truths We Hold: An American Journey, Harris, Kamala [ 3 of 5 stars ]</li> <li>Restore and Rebalance: Yoga for Deep Relaxation, Lasater, Judith Hanson [ 3 of 5 stars ]</li> <li>The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win, Kim, Gene [ 2 of 5 stars ]</li> <li>Parlor Games: Amusements and Entertainment for Everyone, Finamore, Roy [ 2 of 5 stars ]</li> <li>Phish’s A Live One (33 1/3), Holland, Walter [ 2 of 5 stars ]</li> <li>Slow: Simple Living for a Frantic World, McAlary, Brooke [ 1 of 5 stars ]</li> <li>Fire and Fury: Inside the Trump White House, Wolff, Michael [ no rating / did not finish ]</li> </ul> 
      </description>
    </item>
    <item>
      <title>Functional Factories in JavaScript</title>
      <link>https://chrisman.github.io/posts/2019-12-15-factories.html</link>
      <description>
        <p>tags: #functional-programming #object-oriented-programming #javascript #classes #mixins #sandwiches</p> <h1 id="functional-factories-in-javascript">Functional Factories in JavaScript</h1> <p>An argument against using classes in JavaScript, and using factories instead.</p> <h2 id="what-introductions-and-definitions">What: Introductions and Definitions</h2> <h3 id="background">Background</h3> <p>This article started out as a response to <a href="https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l">The Factory Pattern - Design Patterns meet the Frontend</a> by Colum Ferry on dev.to, but at this point I think I rambled in enough different directions that it is no longer a direct response. But that’s where my head was at when I started writing this. And now you know.</p> <h3 id="factories">Factories</h3> <p>The Factory Pattern is a classic design pattern from the world of <abbr title="Object Oriented Programming">OOP</abbr>, where it is used for one or both of the following reasons:</p> <ol type="1"> <li><p>to create multiple instances of a class, and/or</p></li> <li><p>to extend a base class. e.g. a <code>VehicleFactory</code> might return a <code>Car</code> or a <code>Plane</code> while hiding the implementation details for a <code>Vehicle</code>.</p></li> </ol> <p>See the <a href="https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l">previously mentioned dev.to article</a> for an overview of that functionality.</p> <p>My intent here is to show how this pattern, with slight modifications, can be used in Functional Programing for pretty much the same reasons.</p> <h2 id="why-problems-with-classes">Why: Problems with Classes</h2> <p>I advocate for using objects and factories and mixins because they are good abstractions, patterns, and practices.</p> <p>I also advocate for <em>not</em> using classes because I think they are not good abstractions.</p> <p>This section (not so) briefly touches on my main reasons for disliking JS classes, and as such, is intended to serve as a sort of motivation for not using them, and for using the recommended alternatives instead.</p> <p>The reasons I don’t like JS classes are these:</p> <ol type="1"> <li>There Are No Classes in JavaScript</li> <li>Promotion of “Bad JavaScript”</li> <li>Classical Inheritance</li> <li>Wrong Abstraction</li> </ol> <h3 id="there-are-no-classes-in-javascript">There Are No Classes in JavaScript</h3> <p>Look, words matter and telling the truth is important.</p> <p>These are the facts:</p> <ul> <li>There are no classes in JavaScript</li> <li>JavaScript has prototypes</li> </ul> <blockquote> <p>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript’s existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.</p> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">mdn</a></p> </blockquote> <p>Before talking about anything else whatsoever–before talking about things like effeciency, correctness, or expressiveness–classes are dishonest representations of how JavaScript works. They hide and obfuscate the way prototypes behave.</p> <p>At the very worst, they are a gotcha for programmers coming from OOP languages like Java that <em>actually have</em> classes, and given that context will expect JS classes to behave a certain way. (In fairness, JS classes mostly <em>do</em> behave like classes. But they’re still <em>not</em> classes.)</p> <h3 id="promotion-of-bad-javascript">Promotion of “Bad JavaScript”</h3> <p>Before the widespread adoption of classes, it was my personal observation that it was easier to avoid both seeing and using problematic language keywords like <code>new</code> and <code>this</code>. I see them more frequently now as people wrangle with scoping and binding because of classes.</p> <p>It also introduces <em>new</em> problematic complexity through constructors and <code>super</code>. It only takes a few seconds to remember whether you have to call <code>super</code> or not, but that lost time is a distraction.</p> <h3 id="classical-inheritance">Classical Inheritance</h3> <p>One of the reasons that OOP is broken/falling out of favor/heavily criticized is because of classical inheritance. And people know this. Even within the OOP community, it is known that <em>composition is favored over inheritance</em>.</p> <p>JS classes promote classical inheritance through use of the <code>extends</code> keyword. That is, creating “is a” relationships between objects: a car “is a” vehicle, and a Toyota “is a” car, and a Prius “is a” Toyota.</p> <p>Classical inheritance, as a means of describing data, starts to break down fairly quickly given a small degree of complexity for a couple reasons, including the following:</p> <ol type="1"> <li>The Sandwich Problem</li> <li>The Diamond Problem</li> <li>The Banana Problem</li> </ol> <h4 id="the-sandwich-problem">The Sandwich Problem</h4> <p>There’s a whole contentious meme about the Sandwich Problem. People seriously get up in arms about it. My cousin won’t even speak to me any more because of the fight we had last Thanksgiving about sandwiches.</p> <p>Here’s your chance to play along, Dear Reader. How many of the following items have an “is a” relationship to “Sandwich?”</p> <ul> <li>Hoagie</li> <li>Taco</li> <li>Salad wrap</li> <li>Quesadilla</li> <li>Raviolli</li> <li>Poptart</li> <li>Ice Cream Sandwich</li> <li>Burrito</li> </ul> <p>Look, here’s the deal. The most basic definition of a sandwich is this: some kind of a filling (usually meat, cheese, and/or veggies), enclosed by some kind of a container/wrapper (usually bread).</p> <p>The very second you try to enforce more than that, stuff falls apart:</p> <ul> <li><p>Two slices of bread? What about hinged bread like a subway/hero/footlong/etc?</p></li> <li><p>Hinged bread is okay? Then why not tacos or gyros? A quesadilla is hinged bread.</p></li> <li><p>If hinged breads are okay then why not “round breads?” What about wraps? What about burritos?</p></li> <li><p>Stuffed sandwiches. Is a pita a sandwich? Is a calzone?</p></li> <li><p>Is an open faced sandwich a sandwich? (Yes, it is.) Oh, then the filling doesn’t even need to be enclosed by the wrapper? Well then, pizza is a sandwich, because what really is the difference between an open faced sandwich and a pizza?</p></li> </ul> <p>When your job is to describe the relationships between data, when your job is literally to sit around and think about stuff like “is <code>x</code> a sandwich?” then “is a” quickly starts to fall apart.</p> <p>Yes, data is relational. But inheritance still sucks. It’s tightly coupled and brittle, and “sandwich” is a nonsense word.</p> <p>Here’s another approach, to return to our <code>Vehicle</code> example. Sure, a boat and a car and a plane are all vehicles. But so is a motorcycle and a bicycle and a horse. A vehicle can have some number of wheels, or some number of hooves.</p> <p>What defines a vehicle? Some means of moving you from Point A to Point B? In that case, is a human itself a vehicle?</p> <p>Literally, what is a vehicle? What is the common ancestor of “horse”, “airplane,” and “rollerblade?”</p> <p>Given this mental model, for most things you’re trying describe, you continue to abstract away the common attributes and behaviors for each <em>thing</em> until the base class is something totally stupid and useless like “object.”</p> <h4 id="the-diamond-problem">The Diamond Problem</h4> <p>The problem of inheriting from multiple parent classes. Also called, appropriately, the Multiple Inheritance problem.</p> <p>“Diamond” refers to the shape of the inheritance graph:</p> <pre><code>   [A]      A: office machine /   \     B: printer [B]   [C]   C: copier \   /     D: printer/copier [D]</code></pre> <p>If you are creating a multifunction office machine like a printer/copier/fax/espresso-maker, then when you’re creating functionality for Object D, you may not need to implement your own version of <code>print</code> because printers (Object B) and copiers (Object C) both print. But how does the program know <em>which</em> parent <code>print</code> to use?</p> <p>Most languages take care of this decision for you as a feature of that language, so you don’t have to think about it that much. But the point is, the problem is <em>there</em>. It’s a flaw inherint to this style of thinking.</p> <h4 id="the-banana-problem">The Banana Problem</h4> <p>Lastly, the Banana Problem famously describes the problem with state and environment, and a long chain of inheritance.</p> <blockquote> <p>…the problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.</p> <p>Joe Armstrong, Coders at Work</p> </blockquote> <h3 id="wrong-abstraction">Wrong Abstraction</h3> <p>Classes are also the wrong abstraction some/most of the time. Or least they’re a <em>limited</em> abstraction.</p> <p>Sometimes you do want some kind of a grouping of data and functions. It’s tempting to just reach for a class in that case, but you can do the exact same thing with a plain old object, or maybe a function that closes over some data and returns an object.</p> <p>The point is that you can and should be a little more discerning about the representation you need, and use an abstraction that is only as complicated as you need it to be. First choose an object. Then a function. Then maybe a factory function. And <em>then</em> maybe a class. Instead of just always using class, class, class, and class.</p> <p>It’s kind of a case of “If the only tool you have is a hammer, every problem looks like a nail.” The ubiquity of JS classes might lead you to believe that classes are the only tools you have, but they are not.</p> <h2 id="how-using-factories">How: Using Factories</h2> <p>Anyway, enough about stuff that’s bad. How about some good stuff that you <em>should</em> use? Back to Functional Factories in JS!</p> <p>Object factories create multiple objects, and can “extend” a “base class” through functional mixins.</p> <h3 id="factory-101-creating-multiple-instances">Factory 101: Creating multiple instances</h3> <p>This part is easy. Imagine a car.</p> <p>Here is an example of object destructuring with default values:</p> <pre><code>const createCar = ({ make = &#39;toyota&#39;, model = &#39;prius&#39;, mpg = 80, seats = 4 } = {}) =&gt; { make, model, mpg, seats }</code></pre> <p>That’s an object factory. A function that recieves some data and returns an object.</p> <p>You can now easily do the following:</p> <pre><code>const car = createCar({ make: &#39;Ford&#39;, model: &#39;F350&#39;, mpg: 10, seats: 2, })</code></pre> <p>Boom 💥</p> <p>No <code>new</code>, no <code>this</code>. Just plain old objects. Create as many cars as you want.</p> <h3 id="mixins-extending-a-base-class">Mixins: Extending a base class</h3> <p>Okay, this is where things get a whole lot more functional.</p> <p>Functional mixins are a good way to avoid and overcome many of the challenges and downfalls of classical inheritance.</p> <p>They are able to do this because they, as one is encouraged to do even in OOP communities, favor <em>composition</em> over <em>inheritance</em>.</p> <p>Imagine, again, we are describing vehicles.</p> <ul> <li><p>Don’t do this: try to describe some useless, universally abstract base class like <code>object</code> that all possible vehicles can inherit from</p></li> <li><p>Instead do this: just start describing attributes, qualities, and functionality. Keep all those little descriptions in a drawer, and you can mix and match them later to create things.</p></li> </ul> <p>Here’s a mixin for movement:</p> <pre><code>const withMovement = o =&gt; { let isMoving = false return Object.assign({}, o, { move() { isMoving = true return this }, stop() { isMoving = false return this }, isMoving: () =&gt; isMoving, }) }</code></pre> <p>I can pass it an empty object and get back an object that has a couple functions on it related to movement. Neat. No muss, no fuss.</p> <p>Here’s one for capacity:</p> <pre><code>const withCapacity = (capacity = 2) =&gt; o =&gt; { let isFull = false; let availableSeats = capacity; return Object.assign({}, o, { getAvailableSeats: () =&gt; availableSeats, getCapacity: () =&gt; capacity, isFull: () =&gt; isFull, fillSeats(n) { if (n &lt;= availableSeats) availableSeats -= n isFull = (availableSeats === 0) return this }, }) }</code></pre> <p>It takes a “capacity” parameter (with a default value of 2) and then an object <code>o</code>, and returns a new object that combines <code>o</code> with some capacity related functions.</p> <p>Maybe a really simple mixin that creates a new object with some number of wheels:</p> <pre><code>const withWheels = (wheels = 4) =&gt; o =&gt; Object.assign({}, o, { wheels, })</code></pre> <p>So now I have a few mixins to play with. I can mix and match them to create a factory for a certain kind of vehicle. Say, a car:</p> <pre><code>const carFactory = ({ capacity, wheels }) =&gt; pipe( withWheels(wheels), withMovement, withCapacity(capacity),)({})</code></pre> <p>This factory takes an “init” type object including <code>capacity</code> and <code>wheels</code>, and then passes those init values into a <em>pipe</em> of mixins.</p> <p>Aside: If you’re not familiar with <code>pipe</code> or <code>compose</code>, just know for now that it’s a way to pass a value through a chain of functions, getting a single output at the end. In this case, it’s the <code>o</code> object in the mixins above. Here’s the definition: <code>const pipe = (...fs) =&gt; (x) =&gt; fs.reduce((y, f) =&gt; f(y), x)</code></p> <p>Anyway, now that we have a car factory, we can create some cars:</p> <pre><code>const bigRig = carFactory({ capacity: 2, wheels: 18, }) const bus = carFactory({ capacity: 100, wheels: 4, })</code></pre> <p>Look at that! We have achieved our two goals:</p> <ol type="1"> <li>We can create multiple, unique objects with our factory</li> <li>They have shared functionality, but not through class or even function inheritance, but through the assembly of a few <em>functional mixins</em></li> </ol> <p>If you want to create some different vehicles, you just keep playing Legos and add/remove some additional mixins:</p> <pre><code>const planeFactory = ({ capacity }) =&gt; pipe( // withWheels(wheels), canFly, withMovement, withCapacity(capacity),)({}) const bikeFactory = ({ capacity = 1, wheels = 2 }) =&gt; pipe( nonMotorized, withWheels(wheels), withMovement, withCapacity(capacity),)({}) const horseFactory = ({ capacity = 1, legs = 4 }) =&gt; pipe( nonMotorized, isAlive(legs), withMovement, withCapacity(capacity),)({})</code></pre> <p>So you’re no longer creating brittle, tightly coupled relationships between parent and child classes, or even worse, child and parent and grandparent and great-grandparent. Instead you have a series of entities that just happen to share various “can”, “with/has”, and “is” qualities and attributes.</p> <p>One place you see this kind of composition is the Entity Component System pattern in video game development. <a href="http://archive.is/VlZ9M">This post</a> was one of my first insights into how powerful a concept it is.</p> <h2 id="conclusion">Conclusion</h2> <p>I don’t like classes in JavaScript, but I do like plain old objects, object factories, and functional mixins. I think they allow a more natural way of describing data, and that they allow for data to grow in complexity without being too fragile or tightly coupled.</p> <h2 id="more-resources-and-notes">More: Resources and Notes</h2> <h3 id="further-reading">Further Reading</h3> <ul> <li><a href="https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l">The Factory Pattern - Design Patterns meet the Frontend by Colum Ferry</a></li> <li><a href="https://medium.com/javascript-scene/composing-software-the-book-f31c77fc3ddc">Composing Software by Eric Elliott</a></li> </ul> <h3 id="glossary">Glossary</h3> <dl> <dt> class </dt> <dd> <ol> <li> In “the map is not the terrain” fashion, a class is not an object, but is a description of an object that can be used to create an object.  </li> <li> …except for in JavaScript, where a class is just syntactic sugar for a plain old JavaScript object, providing some convenient access to its prototype.  </li> </ol> </dd> <dt> FP </dt> <dd> Functional Programming: a style of programming that avoids side effects and embraces snobbery and elitism. Advanced stages of the disease cause the afflicted to say stuff like “A monad is just a monoid in the category of endofunctors, what’s the problem?” and, ultimately, to Lisp.  </dd> <dt> Factory </dt> <dd> That thing which facilitates the churning out of products </dd> <dt> Mixin </dt> <dd> When you go to Cold Stone and you have a small number of base ice creams, and you can add extra flavor through the incorporation of different <em>mixins</em> like oreos or peanuts. You can do the same thing with functions instead of ice cream and add-ons.  </dd> <dt> OOP </dt> <dd> Object Oriented Programing: a maligned practice of programming that requires the memorization of a dozen or more Design Patterns to be consistantly useful.  </dd> <dt> Sandwich </dt> <dd> No idea. Literally a nonsense word that has no meaning and no definition.  </dd> </dl> 
      </description>
    </item>
  </channel>
</rss> 
