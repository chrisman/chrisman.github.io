<?xml version="1.0" ?>
<rss version="2.0">
  <channel>
    <title>chrisman.github.io</title>
    <link>https://chrisman.github.io/</link>
    <description>chrisman's tech blog</description>
    <item>
      <title>Books I Read in 2019</title>
      <link>https://chrisman.github.io/posts/2019-12-23-books.html</link>
      <description>
        <p>tags: #books #reading #goals</p> <h1 id="books-i-read-in-2019">Books I Read in 2019</h1> <p>Here are all the books I read in 2019!</p> <p>I don‚Äôt want to write any individual reviews here. Those are all on <a href="https://www.goodreads.com/review/list/409485-christopher?read_at=2019">goodreads</a>. I want to use this space instead to look at some patterns and trends.</p> <p>Also, here‚Äôs the nifty little <a href="https://www.goodreads.com/user/year_in_books/2019/409485">Year In Review page</a> that goodreads made for me. Thanks, goodreads!</p> <h2 id="top-recommendations">Top Recommendations</h2> <p>These are the best books of the year.</p> <p>Fantasy:</p> <ul> <li>The Broken Earth Series ‚Äì Jemisin is my new favorite author. I cannot wait to read more of her.</li> <li>Gideon the Ninth ‚Äì Wacky, weird, and original</li> </ul> <p>Nonfiction:</p> <ul> <li>Why We Sleep: Unlocking the Power of Sleep and Dreams ‚Äì literally life changing</li> <li>Dreamland: The True Tale of America‚Äôs Opiate Epidemic ‚Äì comprehensive overview of the US opioid epidemic.</li> </ul> <p>Graphic Novel:</p> <ul> <li>My Degeneration: A Journey Through Parkinson‚Äôs ‚Äì quick read, very revealing</li> </ul> <p>Comics:</p> <ul> <li>Paper Girls ‚Äì if Stranger Things was about girls with paper routes, and had more time travel</li> </ul> <p>Fiction:</p> <ul> <li>Jonathan Strange &amp; Mr Norrell ‚Äì hauntingly beautiful</li> <li>Beartown ‚Äì it was just really pretty. really, really well done.</li> </ul> <h2 id="goals">Goals</h2> <p>For the second year in a row, I set a goal to read 100 books, and then fell short of achieving that goal.</p> <p>I might have hit 100 this year if I hadn‚Äôt taken a long hiatus this summer from reading any audiobooks. (I spent that time listening to a lot of podcasts instead of reading.)</p> <p>I‚Äôm going to set the same goal again next year, and hope that the third time is the charm! I think I can hit it because I project the following:</p> <ul> <li><p>I can usually read roughly one audiobook a week. If I do <em>half</em> of that, it‚Äôs still 26. So I‚Äôll start off with estimating 25 as a lower limit and, let‚Äôs say 50 as an upper limit. (25 / 50)</p></li> <li><p>I can also usually read one comic book/graphic novel each weekend. I‚Äôll give that the same 25/50 upper/lower bounds. (total: 50 / 100)</p></li> <li><p>One book every month for bookclub at work is another 12. (total: 62 / 112)</p></li> <li><p>I finish 1 - 3 books each year while vacationing (total: 63 / 115)</p></li> <li><p>And I read at least one other book every month or two, so that‚Äôs another 6 - 12. (total: 69 / 127)</p></li> </ul> <p>The dead middle of that range is 98. Round up to 100 and call it a day! 2020 is gonna be my year, I can tell. I can feel it. The year of 100 books!</p> <h2 id="numbers">Numbers</h2> <p>Here‚Äôs some numbers.</p> <ul> <li><p>77 Total Books</p> <ul> <li>19 Audiobooks</li> <li>27 Tangible Books (Mostly comics and D&amp;D source books)</li> <li>31 eBooks</li> </ul></li> <li><p>21,793 Pages</p></li> <li><p>3 ‚ÄúDid Not Finish‚Äù: some books are boring, or terrible, and life‚Äôs too short to spend on bad books.</p></li> <li><p>Ratings: (Average rating = 3.6) I think I had started the year with this idea of only giving out 1 star or 5 stars. Create a ‚Äúthumbs up / thumbs down‚Äù system. I didn‚Äôt stick to that. But I still think that the 5 star scale continues to be problematic. I just never know what a two or a four is supposed to be.</p> <ul> <li>five star: 24</li> <li>four star: 17</li> <li>three star: 22</li> <li>two star: 7</li> <li>one star: 4</li> </ul></li> </ul> <h2 id="books">Books</h2> <p>Okay, here‚Äôs the list broken down into categories:</p> <ol type="1"> <li>Fantasy</li> <li>Sci-fi</li> <li>Comics and Graphic Novels <ol type="1"> <li>Superheroes and Comics</li> <li>Non-Superheroes and Graphic Novels</li> </ol></li> <li>D&amp;D Sourcebooks</li> <li>Work Bookclub</li> <li>Other Work Related Stuff / Professional Development</li> <li>Fiction</li> <li>Non-Fiction</li> </ol> <h3 id="fantasy">Fantasy</h3> <p>Broken Earth is one of the best things I have ever read. Finishing the series is one of my highlights of the year. I want to recommend it to people who don‚Äôt even read fantasy.</p> <p>Ratcatchers was another standout, and Gideon was so fresh and weird and unique and great.</p> <ul> <li>Broken Earth Series <ul> <li>The Obelisk Gate (The Broken Earth, #2), Jemisin, N.K. [ 5 of 5 stars ]</li> <li>The Stone Sky (The Broken Earth, #3), Jemisin, N.K. [ 5 of 5 stars ]</li> </ul></li> <li>Ratcatchers Series <ul> <li>Priest (Ratcatchers #1), Colville, Matthew [ 4 of 5 stars ]</li> <li>Thief (Ratcatchers, #2), Colville, Matthew [ 5 of 5 stars ]</li> </ul></li> <li>Gideon the Ninth (The Locked Tomb, #1), Muir, Tamsyn [ 5 of 5 stars ]</li> </ul> <p>The following books belong to a category that I don‚Äôt have a good term for. They‚Äôre just good old regular swords and sorcery fantasy books. Pulpy and tropey and, for the most part, just plain good fun.</p> <ul> <li>The Way of Shadows (Night Angel, #1), Weeks, Brent [ 3 of 5 stars ]</li> <li>Beyond the Moons (Spelljammer: The Cloakmaster Cycle, #1), Cook, David Zeb [ 1 of 5 stars ]</li> <li>Eberron: The Dreaming Dark Series <ul> <li>The City of Towers (Eberron: The Dreaming Dark, #1), Baker, Keith [ 3 of 5 stars ]</li> <li>The Shattered Land (Eberron: The Dreaming Dark, #2), Baker, Keith [ 3 of 5 stars ]</li> </ul></li> </ul> <h3 id="sci-fi">Sci-fi</h3> <p>Finally got around to reading Dune. Been meaning to since forever.</p> <ul> <li>Dune, Herbert, Frank [ 5 of 5 stars ]</li> <li>Feed, Anderson, M.T. [ 2 of 5 stars ]</li> </ul> <h3 id="comics-and-graphic-novels">Comics and Graphic Novels</h3> <h4 id="superheroes-and-comics">Superheroes and Comics</h4> <p>Spent a lot of time with Swamp Thing this year. I‚Äôve always liked him, ever since I was a kid. The TV show came out (and was cancelled üò≠) this year, so I was all smitten.</p> <ul> <li>Action Comics (1938-2011) #775, Kelly, Joe [ 5 of 5 stars ]</li> <li>Swamp Thing <ul> <li>Swamp Thing: The Bronze Age Omnibus, Wein, Len [ 4 of 5 stars ]</li> <li>Swamp Thing by Brian K. Vaughan, Vol. 1, Vaughan, Brian K. [ 3 of 5 stars ]</li> <li>Swamp Thing by Brian K. Vaughan, Vol. 2, Vaughan, Brian K. [ 4 of 5 stars ]</li> </ul></li> <li>Lucifer, Book One (Lucifer, #1), Carey, Mike [ 4 of 5 stars ]</li> <li>Trees, Vol. 2: Two Forests, Ellis, Warren [ 4 of 5 stars ]</li> <li>Tom Strong, Book 1, Moore, Alan [ no rating / did not finish]</li> <li>Hulk <ul> <li>Immortal Hulk, Volume 1: Or is he Both?, Ewing, Al [ 2 of 5 stars ]</li> <li>Immortal Hulk, Volume 2: The Green Door, Ewing, Al [ 3 of 5 stars ]</li> <li>Immortal Hulk, Volume 3: Hulk In Hell, Ewing, Al [ 3 of 5 stars ]</li> </ul></li> <li>Man-Thing, Stine, R.L. [ 1 of 5 stars ]</li> </ul> <h4 id="non-superheroes-and-graphic-novels">Non-Superheroes and Graphic Novels</h4> <p>Paper Girls was the best comic book series I read this year.</p> <p>My Degeneration is the best graphic novel memoir.</p> <ul> <li>My Degeneration: A Journey Through Parkinson‚Äôs, Dunlap-Shohl, Peter [ 5 of 5 stars ]</li> <li>Paper Girls: <ul> <li>Paper Girls, Vol. 1, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>Paper Girls, Vol. 2, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>Paper Girls, Vol. 3, Vaughan, Brian K. [ 4 of 5 stars ]</li> <li>Paper Girls, Vol. 4, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>Paper Girls, Vol. 5, Vaughan, Brian K. [ 5 of 5 stars ]</li> </ul></li> <li>A Study in Emerald, Gaiman, Neil [ 5 of 5 stars ]</li> <li>Saga: Book Three, Vaughan, Brian K. [ 5 of 5 stars ]</li> <li>FUN: Spies, Puzzle Solvers, and a Century of Crosswords, Bacilieri, Paolo [ 4 of 5 stars ]</li> <li>Resident Alien Volume 3: The Sam Hain Mystery, Hogan, Peter [ 4 of 5 stars ]</li> <li>Black Magick, Vol. 1: Awakening, Part One, Rucka, Greg [ 3 of 5 stars ]</li> <li>Stumptown, Vol. 1: The Case of the Girl Who Took Her Shampoo, Rucka, Greg [ 3 of 5 stars ]</li> <li>LaGuardia, Okorafor, Nnedi [ 4 of 5 stars ]</li> <li>Bushido: The Soul of the samurai [a graphic novel], Nitobe Inaz≈ç [ 2 of 5 stars ]</li> </ul> <h3 id="dd-sourcebooks">D&amp;D Sourcebooks</h3> <ul> <li>Xanathar‚Äôs Guide To Everything, Wizards RPG Team [ 5 of 5 stars ]</li> <li>Ghosts of Saltmarsh (Dungeons &amp; Dragons, 5th Edition), Wizards RPG Team [ 5 of 5 stars ]</li> <li>Mordenkainen‚Äôs Tome of Foes (Dungeons &amp; Dragons, 5th Edition), Wizards RPG Team [ 4 of 5 stars ]</li> <li>Premium 2nd Edition Advanced Dungeons &amp; Dragons Player‚Äôs Handbook, Wizards RPG Team [ 2 of 5 stars ]</li> </ul> <h3 id="work-bookclub">Work Bookclub</h3> <p>I use bits of The Coaching Habit at work every day.</p> <ul> <li>The Coaching Habit: Say Less, Ask More &amp; Change the Way You Lead Forever, Bungay Stanier, Michael [ 5 of 5 stars ]</li> <li>Measure What Matters, Doerr, John E. [ 4 of 5 stars ]</li> <li>Drive: The Surprising Truth About What Motivates Us, Pink, Daniel H. [ 3 of 5 stars ]</li> <li>Nudge: Improving Decisions About Health, Wealth, and Happiness, Thaler, Richard H. [ no rating / did not finish ]<br /> </li> <li>The Effortless Experience: Conquering the New Battleground for Customer Loyalty, Dixon, Matthew [ 3 of 5 stars ]</li> </ul> <h3 id="other-work-related-stuff-professional-development">Other Work Related Stuff / Professional Development</h3> <ul> <li>Sams Teach Yourself SQL‚Ñ¢ in 10 Minutes, Forta, Ben [ 5 of 5 stars ]</li> <li>Land of LISP: Learn to Program in LISP, One Game at a Time!, Barski, Conrad [ 4 of 5 stars ]</li> <li>Influence: The Psychology of Persuasion, Cialdini, Robert B. [ 3 of 5 stars ]</li> </ul> <h3 id="fiction">Fiction</h3> <ul> <li>Jonathan Strange &amp; Mr Norrell, Clarke, Susanna [ 5 of 5 stars ]</li> <li>Beartown, Backman, Fredrik [ 5 of 5 stars ]</li> <li>Everything I Never Told You, Ng, Celeste [ 5 of 5 stars ]</li> <li>The Underground Railroad, Whitehead, Colson [ 4 of 5 stars ]</li> <li>The Monk of Mokha, Eggers, Dave [ 4 of 5 stars ]</li> <li>The Alice Network, Quinn, Kate [ 4 of 5 stars ]</li> <li>Golden State, Winters, Ben H. [ 3 of 5 stars ]</li> <li>Dorothy Must Die (Dorothy Must Die, #1), Paige, Danielle [ 3 of 5 stars ]</li> <li>Greatest Enemy (David Rivers #1), Kasper, Jason [ 2 of 5 stars ]</li> </ul> <h3 id="non-fiction">Non-Fiction</h3> <p>Why We Sleep is probably my Best Book Of 2019. It‚Äôs INSANE.</p> <ul> <li>Why We Sleep: Unlocking the Power of Sleep and Dreams, Walker, Matthew [ 5 of 5 stars ]</li> <li>Dreamland: The True Tale of America‚Äôs Opiate Epidemic, Quinones, Sam [ 5 of 5 stars ]</li> <li>Sissy: A Coming-of-Gender Story, Tobia, Jacob [ 4 of 5 stars ]</li> <li>Goodbye, Things: The New Japanese Minimalism, Sasaki, Fumio [ 4 of 5 stars ]</li> <li>Always Look on the Bright Side of Life: A Sortabiography, Idle, Eric [ 4 of 5 stars ]</li> <li>Digital Minimalism: Choosing a Focused Life in a Noisy World, Newport, Cal [ 3 of 5 stars ]</li> <li>Let‚Äôs Make Ramen!: A Comic Book Cookbook, Amano, Hugh [ 3 of 5 stars ]</li> <li>Dungeon Hacks: How NetHack, Angband, and Other Roguelikes Changed the Course of Video Games, Craddock, David L. [ 3 of 5 stars ]</li> <li>Meet the Frugalwoods: Achieving Financial Independence Through Simple Living, Thames, Elizabeth Willard [ 3 of 5 stars ]</li> <li>The Truths We Hold: An American Journey, Harris, Kamala [ 3 of 5 stars ]</li> <li>Restore and Rebalance: Yoga for Deep Relaxation, Lasater, Judith Hanson [ 3 of 5 stars ]</li> <li>Parlor Games: Amusements and Entertainment for Everyone, Finamore, Roy [ 2 of 5 stars ]</li> <li>Phish‚Äôs A Live One (33 1/3), Holland, Walter [ 2 of 5 stars ]</li> <li>Slow: Simple Living for a Frantic World, McAlary, Brooke [ 1 of 5 stars ]</li> <li>Fire and Fury: Inside the Trump White House, Wolff, Michael [ no rating / did not finish ]</li> </ul>
      </description>
    </item>
    <item>
      <title>Functional Factories in JavaScript</title>
      <link>https://chrisman.github.io/posts/2019-12-15-factories.html</link>
      <description>
        <p>tags: #functional-programming #object-oriented-programming #javascript #classes #mixins #sandwiches</p> <h1 id="functional-factories-in-javascript">Functional Factories in JavaScript</h1> <p>An argument against using classes in JavaScript, and using factories instead.</p> <h2 id="what-introductions-and-definitions">What: Introductions and Definitions</h2> <h3 id="background">Background</h3> <p>This article started out as a response to <a href="https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l">The Factory Pattern - Design Patterns meet the Frontend</a> by Colum Ferry on dev.to, but at this point I think I rambled in enough different directions that it is no longer a direct response. But that‚Äôs where my head was at when I started writing this. And now you know.</p> <h3 id="factories">Factories</h3> <p>The Factory Pattern is a classic design pattern from the world of <abbr title="Object Oriented Programming">OOP</abbr>, where it is used for one or both of the following reasons:</p> <ol type="1"> <li><p>to create multiple instances of a class, and/or</p></li> <li><p>to extend a base class. e.g.¬†a <code>VehicleFactory</code> might return a <code>Car</code> or a <code>Plane</code> while hiding the implementation details for a <code>Vehicle</code>.</p></li> </ol> <p>See the <a href="https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l">previously mentioned dev.to article</a> for an overview of that functionality.</p> <p>My intent here is to show how this pattern, with slight modifications, can be used in Functional Programing for pretty much the same reasons.</p> <h2 id="why-problems-with-classes">Why: Problems with Classes</h2> <p>I advocate for using objects and factories and mixins because they are good abstractions, patterns, and practices.</p> <p>I also advocate for <em>not</em> using classes because I think they are not good abstractions.</p> <p>This section (not so) briefly touches on my main reasons for disliking JS classes, and as such, is intended to serve as a sort of motivation for not using them, and for using the recommended alternatives instead.</p> <p>The reasons I don‚Äôt like JS classes are these:</p> <ol type="1"> <li>There Are No Classes in JavaScript</li> <li>Promotion of ‚ÄúBad JavaScript‚Äù</li> <li>Classical Inheritance</li> <li>Wrong Abstraction</li> </ol> <h3 id="there-are-no-classes-in-javascript">There Are No Classes in JavaScript</h3> <p>Look, words matter and telling the truth is important.</p> <p>These are the facts:</p> <ul> <li>There are no classes in JavaScript</li> <li>JavaScript has prototypes</li> </ul> <blockquote> <p>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript‚Äôs existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.</p> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">mdn</a></p> </blockquote> <p>Before talking about anything else whatsoever‚Äìbefore talking about things like effeciency, correctness, or expressiveness‚Äìclasses are dishonest representations of how JavaScript works. They hide and obfuscate the way prototypes behave.</p> <p>At the very worst, they are a gotcha for programmers coming from OOP languages like Java that <em>actually have</em> classes, and given that context will expect JS classes to behave a certain way. (In fairness, JS classes mostly <em>do</em> behave like classes. But they‚Äôre still <em>not</em> classes.)</p> <h3 id="promotion-of-bad-javascript">Promotion of ‚ÄúBad JavaScript‚Äù</h3> <p>Before the widespread adoption of classes, it was my personal observation that it was easier to avoid both seeing and using problematic language keywords like <code>new</code> and <code>this</code>. I see them more frequently now as people wrangle with scoping and binding because of classes.</p> <p>It also introduces <em>new</em> problematic complexity through constructors and <code>super</code>. It only takes a few seconds to remember whether you have to call <code>super</code> or not, but that lost time is a distraction.</p> <h3 id="classical-inheritance">Classical Inheritance</h3> <p>One of the reasons that OOP is broken/falling out of favor/heavily criticized is because of classical inheritance. And people know this. Even within the OOP community, it is known that <em>composition is favored over inheritance</em>.</p> <p>JS classes promote classical inheritance through use of the <code>extends</code> keyword. That is, creating ‚Äúis a‚Äù relationships between objects: a car ‚Äúis a‚Äù vehicle, and a Toyota ‚Äúis a‚Äù car, and a Prius ‚Äúis a‚Äù Toyota.</p> <p>Classical inheritance, as a means of describing data, starts to break down fairly quickly given a small degree of complexity for a couple reasons, including the following:</p> <ol type="1"> <li>The Sandwich Problem</li> <li>The Diamond Problem</li> <li>The Banana Problem</li> </ol> <h4 id="the-sandwich-problem">The Sandwich Problem</h4> <p>There‚Äôs a whole contentious meme about the Sandwich Problem. People seriously get up in arms about it. My cousin won‚Äôt even speak to me any more because of the fight we had last Thanksgiving about sandwiches.</p> <p>Here‚Äôs your chance to play along, Dear Reader. How many of the following items have an ‚Äúis a‚Äù relationship to ‚ÄúSandwich?‚Äù</p> <ul> <li>Hoagie</li> <li>Taco</li> <li>Salad wrap</li> <li>Quesadilla</li> <li>Raviolli</li> <li>Poptart</li> <li>Ice Cream Sandwich</li> <li>Burrito</li> </ul> <p>Look, here‚Äôs the deal. The most basic definition of a sandwich is this: some kind of a filling (usually meat, cheese, and/or veggies), enclosed by some kind of a container/wrapper (usually bread).</p> <p>The very second you try to enforce more than that, stuff falls apart:</p> <ul> <li><p>Two slices of bread? What about hinged bread like a subway/hero/footlong/etc?</p></li> <li><p>Hinged bread is okay? Then why not tacos or gyros? A quesadilla is hinged bread.</p></li> <li><p>If hinged breads are okay then why not ‚Äúround breads?‚Äù What about wraps? What about burritos?</p></li> <li><p>Stuffed sandwiches. Is a pita a sandwich? Is a calzone?</p></li> <li><p>Is an open faced sandwich a sandwich? (Yes, it is.) Oh, then the filling doesn‚Äôt even need to be enclosed by the wrapper? Well then, pizza is a sandwich, because what really is the difference between an open faced sandwich and a pizza?</p></li> </ul> <p>When your job is to describe the relationships between data, when your job is literally to sit around and think about stuff like ‚Äúis <code>x</code> a sandwich?‚Äù then ‚Äúis a‚Äù quickly starts to fall apart.</p> <p>Yes, data is relational. But inheritance still sucks. It‚Äôs tightly coupled and brittle, and ‚Äúsandwich‚Äù is a nonsense word.</p> <p>Here‚Äôs another approach, to return to our <code>Vehicle</code> example. Sure, a boat and a car and a plane are all vehicles. But so is a motorcycle and a bicycle and a horse. A vehicle can have some number of wheels, or some number of hooves.</p> <p>What defines a vehicle? Some means of moving you from Point A to Point B? In that case, is a human itself a vehicle?</p> <p>Literally, what is a vehicle? What is the common ancestor of ‚Äúhorse‚Äù, ‚Äúairplane,‚Äù and ‚Äúrollerblade?‚Äù</p> <p>Given this mental model, for most things you‚Äôre trying describe, you continue to abstract away the common attributes and behaviors for each <em>thing</em> until the base class is something totally stupid and useless like ‚Äúobject.‚Äù</p> <h4 id="the-diamond-problem">The Diamond Problem</h4> <p>The problem of inheriting from multiple parent classes. Also called, appropriately, the Multiple Inheritance problem.</p> <p>‚ÄúDiamond‚Äù refers to the shape of the inheritance graph:</p> <pre><code>   [A]      A: office machine /   \     B: printer [B]   [C]   C: copier \   /     D: printer/copier [D]</code></pre> <p>If you are creating a multifunction office machine like a printer/copier/fax/espresso-maker, then when you‚Äôre creating functionality for Object D, you may not need to implement your own version of <code>print</code> because printers (Object B) and copiers (Object C) both print. But how does the program know <em>which</em> parent <code>print</code> to use?</p> <p>Most languages take care of this decision for you as a feature of that language, so you don‚Äôt have to think about it that much. But the point is, the problem is <em>there</em>. It‚Äôs a flaw inherint to this style of thinking.</p> <h4 id="the-banana-problem">The Banana Problem</h4> <p>Lastly, the Banana Problem famously describes the problem with state and environment, and a long chain of inheritance.</p> <blockquote> <p>‚Ä¶the problem with object-oriented languages is they‚Äôve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.</p> <p>Joe Armstrong, Coders at Work</p> </blockquote> <h3 id="wrong-abstraction">Wrong Abstraction</h3> <p>Classes are also the wrong abstraction some/most of the time. Or least they‚Äôre a <em>limited</em> abstraction.</p> <p>Sometimes you do want some kind of a grouping of data and functions. It‚Äôs tempting to just reach for a class in that case, but you can do the exact same thing with a plain old object, or maybe a function that closes over some data and returns an object.</p> <p>The point is that you can and should be a little more discerning about the representation you need, and use an abstraction that is only as complicated as you need it to be. First choose an object. Then a function. Then maybe a factory function. And <em>then</em> maybe a class. Instead of just always using class, class, class, and class.</p> <p>It‚Äôs kind of a case of ‚ÄúIf the only tool you have is a hammer, every problem looks like a nail.‚Äù The ubiquity of JS classes might lead you to believe that classes are the only tools you have, but they are not.</p> <h2 id="how-using-factories">How: Using Factories</h2> <p>Anyway, enough about stuff that‚Äôs bad. How about some good stuff that you <em>should</em> use? Back to Functional Factories in JS!</p> <p>Object factories create multiple objects, and can ‚Äúextend‚Äù a ‚Äúbase class‚Äù through functional mixins.</p> <h3 id="factory-101-creating-multiple-instances">Factory 101: Creating multiple instances</h3> <p>This part is easy. Imagine a car.</p> <p>Here is an example of object destructuring with default values:</p> <pre><code>const createCar = ({ make = &#39;toyota&#39;, model = &#39;prius&#39;, mpg = 80, seats = 4 } = {}) =&gt; { make, model, mpg, seats }</code></pre> <p>That‚Äôs an object factory. A function that recieves some data and returns an object.</p> <p>You can now easily do the following:</p> <pre><code>const car = createCar({ make: &#39;Ford&#39;, model: &#39;F350&#39;, mpg: 10, seats: 2, })</code></pre> <p>Boom üí•</p> <p>No <code>new</code>, no <code>this</code>. Just plain old objects. Create as many cars as you want.</p> <h3 id="mixins-extending-a-base-class">Mixins: Extending a base class</h3> <p>Okay, this is where things get a whole lot more functional.</p> <p>Functional mixins are a good way to avoid and overcome many of the challenges and downfalls of classical inheritance.</p> <p>They are able to do this because they, as one is encouraged to do even in OOP communities, favor <em>composition</em> over <em>inheritance</em>.</p> <p>Imagine, again, we are describing vehicles.</p> <ul> <li><p>Don‚Äôt do this: try to describe some useless, universally abstract base class like <code>object</code> that all possible vehicles can inherit from</p></li> <li><p>Instead do this: just start describing attributes, qualities, and functionality. Keep all those little descriptions in a drawer, and you can mix and match them later to create things.</p></li> </ul> <p>Here‚Äôs a mixin for movement:</p> <pre><code>const withMovement = o =&gt; { let isMoving = false return Object.assign({}, o, { move() { isMoving = true return this }, stop() { isMoving = false return this }, isMoving: () =&gt; isMoving, }) }</code></pre> <p>I can pass it an empty object and get back an object that has a couple functions on it related to movement. Neat. No muss, no fuss.</p> <p>Here‚Äôs one for capacity:</p> <pre><code>const withCapacity = (capacity = 2) =&gt; o =&gt; { let isFull = false; let availableSeats = capacity; return Object.assign({}, o, { getAvailableSeats: () =&gt; availableSeats, getCapacity: () =&gt; capacity, isFull: () =&gt; isFull, fillSeats(n) { if (n &lt;= availableSeats) availableSeats -= n isFull = (availableSeats === 0) return this }, }) }</code></pre> <p>It takes a ‚Äúcapacity‚Äù parameter (with a default value of 2) and then an object <code>o</code>, and returns a new object that combines <code>o</code> with some capacity related functions.</p> <p>Maybe a really simple mixin that creates a new object with some number of wheels:</p> <pre><code>const withWheels = (wheels = 4) =&gt; o =&gt; Object.assign({}, o, { wheels, })</code></pre> <p>So now I have a few mixins to play with. I can mix and match them to create a factory for a certain kind of vehicle. Say, a car:</p> <pre><code>const carFactory = ({ capacity, wheels }) =&gt; pipe( withWheels(wheels), withMovement, withCapacity(capacity),)({})</code></pre> <p>This factory takes an ‚Äúinit‚Äù type object including <code>capacity</code> and <code>wheels</code>, and then passes those init values into a <em>pipe</em> of mixins.</p> <p>Aside: If you‚Äôre not familiar with <code>pipe</code> or <code>compose</code>, just know for now that it‚Äôs a way to pass a value through a chain of functions, getting a single output at the end. In this case, it‚Äôs the <code>o</code> object in the mixins above. Here‚Äôs the definition: <code>const pipe = (...fs) =&gt; (x) =&gt; fs.reduce((y, f) =&gt; f(y), x)</code></p> <p>Anyway, now that we have a car factory, we can create some cars:</p> <pre><code>const bigRig = carFactory({ capacity: 2, wheels: 18, }) const bus = carFactory({ capacity: 100, wheels: 4, })</code></pre> <p>Look at that! We have achieved our two goals:</p> <ol type="1"> <li>We can create multiple, unique objects with our factory</li> <li>They have shared functionality, but not through class or even function inheritance, but through the assembly of a few <em>functional mixins</em></li> </ol> <p>If you want to create some different vehicles, you just keep playing Legos and add/remove some additional mixins:</p> <pre><code>const planeFactory = ({ capacity }) =&gt; pipe( // withWheels(wheels), canFly, withMovement, withCapacity(capacity),)({}) const bikeFactory = ({ capacity = 1, wheels = 2 }) =&gt; pipe( nonMotorized, withWheels(wheels), withMovement, withCapacity(capacity),)({}) const horseFactory = ({ capacity = 1, legs = 4 }) =&gt; pipe( nonMotorized, isAlive(legs), withMovement, withCapacity(capacity),)({})</code></pre> <p>So you‚Äôre no longer creating brittle, tightly coupled relationships between parent and child classes, or even worse, child and parent and grandparent and great-grandparent. Instead you have a series of entities that just happen to share various ‚Äúcan‚Äù, ‚Äúwith/has‚Äù, and ‚Äúis‚Äù qualities and attributes.</p> <p>One place you see this kind of composition is the Entity Component System pattern in video game development. <a href="http://archive.is/VlZ9M">This post</a> was one of my first insights into how powerful a concept it is.</p> <h2 id="conclusion">Conclusion</h2> <p>I don‚Äôt like classes in JavaScript, but I do like plain old objects, object factories, and functional mixins. I think they allow a more natural way of describing data, and that they allow for data to grow in complexity without being too fragile or tightly coupled.</p> <h2 id="more-resources-and-notes">More: Resources and Notes</h2> <h3 id="further-reading">Further Reading</h3> <ul> <li><a href="https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l">The Factory Pattern - Design Patterns meet the Frontend by Colum Ferry</a></li> <li><a href="https://medium.com/javascript-scene/composing-software-the-book-f31c77fc3ddc">Composing Software by Eric Elliott</a></li> </ul> <h3 id="glossary">Glossary</h3> <dl> <dt> class </dt> <dd> <ol> <li> In ‚Äúthe map is not the terrain‚Äù fashion, a class is not an object, but is a description of an object that can be used to create an object.  </li> <li> ‚Ä¶except for in JavaScript, where a class is just syntactic sugar for a plain old JavaScript object, providing some convenient access to its prototype.  </li> </ol> </dd> <dt> FP </dt> <dd> Functional Programming: a style of programming that avoids side effects and embraces snobbery and elitism. Advanced stages of the disease cause the afflicted to say stuff like ‚ÄúA monad is just a monoid in the category of endofunctors, what‚Äôs the problem?‚Äù and, ultimately, to Lisp.  </dd> <dt> Factory </dt> <dd> That thing which facilitates the churning out of products </dd> <dt> Mixin </dt> <dd> When you go to Cold Stone and you have a small number of base ice creams, and you can add extra flavor through the incorporation of different <em>mixins</em> like oreos or peanuts. You can do the same thing with functions instead of ice cream and add-ons.  </dd> <dt> OOP </dt> <dd> Object Oriented Programing: a maligned practice of programming that requires the memorization of a dozen or more Design Patterns to be consistantly useful.  </dd> <dt> Sandwich </dt> <dd> No idea. Literally a nonsense word that has no meaning and no definition.  </dd> </dl>
      </description>
    </item>
  </channel>
</rss> 
